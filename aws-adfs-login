#!/usr/bin/python

import os
import sys
import boto.sts
import boto.s3
import requests
import getpass
import ConfigParser
import base64
import logging
import xml.etree.ElementTree as ET
import re
from bs4 import BeautifulSoup
from os.path import expanduser
from urlparse import urlparse, urlunparse

##########################################################################

testing_mode = False

profile = os.environ['AWS_PROFILE'] if 'AWS_PROFILE' in os.environ else ''

profile_section = 'profile ' + profile if profile != '' else 'default'

region = 'eu-west-1'

aws_credentials_file = '~/.aws/credentials'
aws_config_file = '~/.aws/config'

ssl_verification = True

# Uncomment to enable low level debugging
# logging.basicConfig(level=logging.DEBUG)

idp_entry_url = ''
idp_role_arn = ''

##########################################################################

config = ConfigParser.RawConfigParser()
config.read(expanduser(aws_config_file))

if not config.has_section(profile_section):
  print 'No profile section defined in configuration file'
  sys.exit(1)

if config.has_option(profile_section, 'idp_entry_url'):
  idp_entry_url = config.get(profile_section, 'idp_entry_url')
else:
  print 'No idp_entry_url specified for the selected profile.'
  sys.exit(1)

if config.has_option(profile_section, 'idp_role_arn'):
  idp_role_arn = config.get(profile_section, 'idp_role_arn')
else:
  print 'No idp_role_arn specified for the selected profile'
  sys.exit(1)

if config.has_option(profile_section, 'idp_username'):
  username = config.get(profile_section, 'idp_username')
else:
  print 'Username:'
  username = raw_input()

if config.has_option(profile_section, 'idp_password') and testing_mode:
  password = config.get(profile_section, 'idp_password')
else:
  print 'Password:'
  password = getpass.getpass()

if config.has_option(profile_section, 'region'):
  region = config.get(profile_section, 'region')

print 'Signing in as', username

# Initiate session handler
session = requests.Session()

# Programmatically get the SAML assertion
# Opens the initial IdP url and follows all of the HTTP302 redirects, and
# gets the resulting login page
form_response = session.get(idp_entry_url, verify=ssl_verification)
# Capture the idp_auth_form_submit_url, which is the final url after all the 302s
idp_auth_form_submit_url = form_response.url

# Parse the response and extract all the necessary values
# in order to build a dictionary of all of the form values the IdP expects
form_soup = BeautifulSoup(form_response.text.decode('utf8'),"lxml")
payload = {}

for input_tag in form_soup.find_all(re.compile('(INPUT|input)')):
    name = input_tag.get('name','')
    value = input_tag.get('value','')
    if "user" in name.lower():
        #Make an educated guess that this is the right field for the username
        payload[name] = username
    elif "email" in name.lower():
        #Some IdPs also label the username field as 'email'
        payload[name] = username
    elif "pass" in name.lower():
        #Make an educated guess that this is the right field for the password
        payload[name] = password
    else:
        #Simply populate the parameter with the existing value (picks up hidden fields in the login form)
        payload[name] = value

# Set our AuthMethod to Form-based auth because the code above sees two values
# for authMethod and the last one is wrong
payload['AuthMethod'] = 'FormsAuthentication'

# Debug the parameter payload if needed
# Use with caution since this will print sensitive output to the screen

# print payload

# Some IdPs don't explicitly set a form action, but if one is set we should
# build the idp_auth_form_submit_url by combining the scheme and hostname
# from the entry url with the form action target
# If the action tag doesn't exist, we just stick with the
# idp_auth_form_submit_url above
for input_tag in form_soup.find_all(re.compile('(FORM|form)')):
    action = input_tag.get('action')
    login_id = input_tag.get('id')
    if (action and login_id == "loginForm"):
        parsed_url = urlparse(idp_entry_url)
        idp_auth_form_submit_url = parsed_url.scheme + "://" + parsed_url.netloc + action

# print idp_auth_form_submit_url
# print ''

# Performs the submission of the IdP login form with the above post data
login_response = session.post(
    idp_auth_form_submit_url, data=payload, verify=ssl_verification)

# Debug the response if needed
# print (login_response.text)

# MFA Step 1 - If you have MFA Enabled, there are two additional steps to authenticate
# Choose a verification option and reload the page

# Capture the idp_auth_form_submit_url, which is the final url after all the 302s
mfa_url = login_response.url

login_soup = BeautifulSoup(login_response.text.decode('utf8'),"lxml")
payload2 = {}

for input_tag in login_soup.find_all(re.compile('(INPUT|input)')):
    name = input_tag.get('name','')
    value = input_tag.get('value','')
    #Simply populate the parameter with the existing value (picks up hidden fields in the login form)
    payload2[name] = value

token = ''

if 'ChallengeQuestionAnswer' in payload2:
  print "MFA token:",
  token = raw_input()

  payload2['ChallengeQuestionAnswer'] = token
  payload2['AuthMethod'] = 'TOTPAuthenticationProvider'

mfa_response = session.post(
    mfa_url, data=payload2, verify=ssl_verification)

# Debug the response if needed
#print (mfa_response.text)

# MFA Step 2 - Fire the form and wait for verification
mfasoup = BeautifulSoup(mfa_response.text.decode('utf8'),"lxml")
payload3 = {}

for input_tag in mfasoup.find_all(re.compile('(INPUT|input)')):
    name = input_tag.get('name','')
    value = input_tag.get('value','')
    #Simply populate the parameter with the existing value (picks up hidden fields in the login form)
    payload3[name] = value

payload3['ChallengeQuestionAnswer'] = token
payload3['AuthMethod'] = 'TOTPAuthenticationProvider'

assertion = payload3['SAMLResponse'] if 'SAMLResponse' in payload3 else ''

if assertion == '':
  mfa_response2 = session.post(
      mfa_url, data=payload3, verify=ssl_verification)

  # Overwrite and delete the credential variables, just for safety
  username = '##############################################'
  password = '##############################################'
  del username
  del password

  # # Decode the response and extract the SAML assertion

  soup = BeautifulSoup(mfa_response2.text.decode('utf8'),'lxml')
  assertion = ''

  # Look for the SAMLResponse attribute of the input tag (determined by
  # analyzing the debug print lines above)
  for input_tag in soup.find_all('input'):
      if(input_tag.get('name') == 'SAMLResponse'):
          # (input_tag.get('value'))
          assertion = input_tag.get('value')

# Better error handling is required for production use.
if (assertion == ''):
    #TODO: Insert valid error checking/handling
    print 'Response did not contain a valid SAML assertion'
    sys.exit(0)

# Debug only
# print(base64.b64decode(assertion))

# Parse the returned assertion and extract the authorized roles
root = ET.fromstring(base64.b64decode(assertion))

role_matched = False
idp_principal_arn = ''
aws_roles = []

for saml2attribute in root.iter('{urn:oasis:names:tc:SAML:2.0:assertion}Attribute'):
    if (saml2attribute.get('Name') == 'https://aws.amazon.com/SAML/Attributes/Role'):
        for saml2attributevalue in saml2attribute.iter('{urn:oasis:names:tc:SAML:2.0:assertion}AttributeValue'):
            chunks = saml2attributevalue.text.split(',')
            principal_arn = chunks[0]
            role_arn = chunks[1]

            if idp_role_arn != '' and idp_role_arn == role_arn:
              role_matched = True
              idp_principal_arn = principal_arn
              break

            aws_roles.append(role_arn)

if not role_matched:
  print 'SAML assertion does not contain required role. You are not allowed to assume it.'
  print 'The roles you are allowed to assume are:'

  for aws_role in aws_roles:
    print '-', aws_role

  sys.exit(1)

# Use the assertion to get an AWS STS token using Assume Role with SAML
conn = boto.sts.connect_to_region(region, profile_name='default')
token = conn.assume_role_with_saml(idp_role_arn, idp_principal_arn, assertion)

# Write the AWS STS token into the AWS credential file

# Read in the existing config file

credentials_config_path = expanduser(aws_credentials_file)

credentials_config = ConfigParser.RawConfigParser()
credentials_config.read(credentials_config_path)

# Put the credentials into a saml specific section instead of clobbering
# the default credentials
if not credentials_config.has_section(profile):
    credentials_config.add_section(profile)

credentials_config.set(profile, 'aws_access_key_id', token.credentials.access_key)
credentials_config.set(profile, 'aws_secret_access_key', token.credentials.secret_key)
credentials_config.set(profile, 'aws_session_token', token.credentials.session_token)

# Write the updated config file
with open(credentials_config_path, 'w+') as config_file:
    credentials_config.write(config_file)

# Give the user some basic info as to what has just happened
print '\n\n----------------------------------------------------------------'
print 'Your are now signed in. The token will expire at {0}.'.format(token.credentials.expiration)
print 'After this time, you may safely rerun this script to refresh your access key pair.'
print '----------------------------------------------------------------\n\n'
